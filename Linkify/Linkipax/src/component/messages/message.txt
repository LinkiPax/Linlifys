

import React, { useState, useEffect, useRef } from "react";
import { Button, ListGroup, Form, InputGroup } from "react-bootstrap";
import { io } from "socket.io-client";
import { useDispatch, useSelector } from "react-redux";
import { addMessage, setMessages } from "../../MessageSlice";
import axios from "axios";
import "./Messages.css";

let socket;

const Messages = () => {
  const dispatch = useDispatch();
  const messages = useSelector((state) => state.messages);
  const [messageContent, setMessageContent] = useState("");
  const [targetUserId, setTargetUserId] = useState(""); // Selected user to chat with
  const [loading, setLoading] = useState(true);
  const [userData, setUserData] = useState(null);
  const [connections, setConnections] = useState([]);
  const [error, setError] = useState("");
  const messagesContainerRef = useRef(null);
  // Fetch user data and connections
  useEffect(() => {
    const userId = localStorage.getItem("userId");
    
    if (userId) {
      const fetchUserData = async () => {
        try {
          const response = await axios.get(`http://localhost:5000/user/${userId}`);
          setUserData(response.data);
          setConnections(response.data.connections);
        } catch (err) {
          setError("Error fetching user data.");
          console.error(err);
        } finally {
          setLoading(false);
        }
      };
      
      fetchUserData();
    } else {
      setError("User ID not found in local storage.");
      setLoading(false);
    }
  }, []);
  
  // Setup socket connection
  useEffect(() => {
    if (!userData) return;
    
    socket = io("http://localhost:5000", { withCredentials: true });
    
    socket.emit("join", userData._id);
    
    // Listen for new messages
    socket.on("new_message", (newMessage) => {
      console.log("New message received:", newMessage);
      dispatch(addMessage(newMessage)); // Update Redux state with the new message
    });
    
    return () => {
      socket.disconnect();
    };
  }, [userData, dispatch]);
  
  // Fetch messages for the selected user
  useEffect(() => {
    if (!targetUserId || !userData) return;
    
    const fetchMessages = async () => {
      try {
        const response = await axios.get("http://localhost:5000/api/messages", {
          params: { userId: userData._id, targetUserId },
        });
        dispatch(setMessages(response.data));
      } catch (err) {
        setError("Error fetching messages.");
        console.error(err);
      }
    };
    
    fetchMessages();
  }, [userData, targetUserId, dispatch]);
  
  // Handle sending a message
  const handleSendMessage = async (e) => {
    e.preventDefault();
    
    if (!messageContent.trim() || !targetUserId) return;
    
    const newMessage = {
      senderId: userData._id,
      receiverId: targetUserId,
      content: messageContent.trim(),
    };
    
    try {
      // Emit message via socket
      socket.emit("send_message", newMessage);
      
      // Optimistic UI update
      dispatch(addMessage(newMessage));
      setMessageContent("");
    } catch (err) {
      setError("Error sending message.");
      console.error(err);
    }
  };
  
  const scrollToBottom = () => {
    if (messagesContainerRef.current) {
      messagesContainerRef.current.scrollTop =
        messagesContainerRef.current.scrollHeight;
    }
  };
  useEffect(() => {
    scrollToBottom(); // Scroll to the bottom whenever messages change
  }, [messages]);
  // Debug logs
  useEffect(() => {
    console.log("Current messages:", messages);
  }, [messages]);
  
  if (loading) return <div>Loading user data...</div>;
  if (error) return <div>{error}</div>;
  
  return (
    <div>
      <h4>Messages</h4>

      {/* Select target user to chat with */}
      <Form.Group>
        <Form.Label>Select a user to chat with:</Form.Label>
        <Form.Control
          as="select"
          value={targetUserId}
          onChange={(e) => setTargetUserId(e.target.value)}
        >
          <option value="">-- Select User --</option>
          {connections.map((connection) => (
            <option key={connection} value={connection}>
              {connection} {/* Replace with the name if available */}
            </option>
          ))}
        </Form.Control>
      </Form.Group>

      {targetUserId && (
        <>
          {/* Display messages */}
          <ListGroup className="list-group" ref={messagesContainerRef}>
            {messages.map((message) => (
              <ListGroup.Item
                key={message._id}
                className={
                  message.senderId === userData._id
                    ? "bg-primary text-white text-end"
                    : "bg-light text-dark text-start"
                }
              >
                <strong>{message.senderId === userData._id ? "You" : "Other"}</strong>:{" "}
                {message.content}
              </ListGroup.Item>
            ))}
          </ListGroup>

          {/* Message input */}
          <Form onSubmit={handleSendMessage}>
            <InputGroup>
              <Form.Control
                type="text"
                value={messageContent}
                onChange={(e) => setMessageContent(e.target.value)}
                placeholder="Type your message..."
              />
              <Button type="submit" variant="primary">
                Send
              </Button>
            </InputGroup>
          </Form>
        </>
      )}
    </div>
  );
};

export default Messages;


General Styles
body {
    font-family: Arial, sans-serif;
    background-color: #f9f9f9;
    margin: 0;
    padding: 0;
  }
  
  /* Messages Container */
  div {
    max-width: 600px;
    margin: 20px auto;
    padding: 20px;
    background-color: #fff;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }
  
  /* User Selection */
  form label {
    font-weight: bold;
    margin-bottom: 5px;
    display: block;
  }
  
  form select {
    margin-bottom: 20px;
  }
  
  /* Messages List */
  .list-group {
    max-height: 400px; /* Set a fixed height for the message list */
    overflow-y: auto; /* Enable vertical scrolling */
    border: 1px solid #ccc;
    border-radius: 8px;
    margin-bottom: 20px;
  }
  
  /* Message Item */
  .list-group-item {
    border: none; /* Remove borders */
    margin: 5px 0; /* Add spacing between messages */
    border-radius: 8px; /* Rounded corners */
    padding: 10px 15px; /* Add padding inside each message */
  }
  
  /* Message Colors */
  .list-group-item.bg-primary {
    background-color: #007bff !important; /* Bootstrap primary color */
  }
  
  .list-group-item.bg-light {
    background-color: #f8f9fa !important; /* Bootstrap light color */
  }
  
  /* Input Group */
  input[type="text"] {
    border-radius: 8px 0 0 8px;
  }
  
  button[type="submit"] {
    border-radius: 0 8px 8px 0;
  }
  
  /* Add a small animation for scrollable area */
  .list-group::-webkit-scrollbar {
    width: 8px;
  }
  
  .list-group::-webkit-scrollbar-thumb {
    background-color: #007bff; /* Scrollbar color */
    border-radius: 4px;
  }
  
  .list-group::-webkit-scrollbar-thumb:hover {
    background-color: #0056b3;
  }
  

import React, { useState, useEffect, useRef } from "react";
import { Button, ListGroup, Form, InputGroup } from "react-bootstrap";
import { io } from "socket.io-client";
import { useDispatch, useSelector } from "react-redux";
import { addMessage, setMessages } from "../../MessageSlice";
import axios from "axios";
import { useParams } from "react-router-dom";
import "./Messages.css";

let socket;

const ChatPage = () => {
  const dispatch = useDispatch();
  const messages = useSelector((state) => state.messages);
  const [messageContent, setMessageContent] = useState("");
  const [userData, setUserData] = useState(null);
  const [connections, setConnections] = useState([]);
  const [error, setError] = useState("");
  const messagesContainerRef = useRef(null);
  const { targetUserId } = useParams(); // Get targetUserId from URL params

  // Fetch user data and connections
  useEffect(() => {
    const userId = localStorage.getItem("userId");

    if (userId) {
      const fetchUserData = async () => {
        try {
          const response = await axios.get(`http://localhost:5000/user/${userId}`);
          setUserData(response.data);
          setConnections(response.data.connections);
        } catch (err) {
          setError("Error fetching user data.");
          console.error(err);
        }
      };

      fetchUserData();
    } else {
      setError("User ID not found in local storage.");
    }
  }, []);

  // Setup socket connection
  useEffect(() => {
    if (!userData) return;

    socket = io("http://localhost:5000", { withCredentials: true });

    socket.emit("join", userData._id);

    // Listen for new messages
    socket.on("new_message", (newMessage) => {
      console.log("New message received:", newMessage);
      dispatch(addMessage(newMessage)); // Update Redux state with the new message
    });

    return () => {
      socket.disconnect();
    };
  }, [userData, dispatch]);

  // Fetch messages for the selected user
  useEffect(() => {
    if (!targetUserId || !userData) return;

    const fetchMessages = async () => {
      try {
        const response = await axios.get("http://localhost:5000/api/messages", {
          params: { userId: userData._id, targetUserId },
        });
        dispatch(setMessages(response.data));
      } catch (err) {
        setError("Error fetching messages.");
        console.error(err);
      }
    };

    fetchMessages();
  }, [userData, targetUserId, dispatch]);

  // Handle sending a message
  const handleSendMessage = async (e) => {
    e.preventDefault();

    if (!messageContent.trim() || !targetUserId) return;

    const newMessage = {
      senderId: userData._id,
      receiverId: targetUserId,
      content: messageContent.trim(),
    };

    try {
      // Emit message via socket
      socket.emit("send_message", newMessage);

      // Optimistic UI update
      dispatch(addMessage(newMessage));
      setMessageContent("");
    } catch (err) {
      setError("Error sending message.");
      console.error(err);
    }
  };

  const scrollToBottom = () => {
    if (messagesContainerRef.current) {
      messagesContainerRef.current.scrollTop = messagesContainerRef.current.scrollHeight;
    }
  };

  useEffect(() => {
    scrollToBottom(); // Scroll to the bottom whenever messages change
  }, [messages]);

  if (error) return <div>{error}</div>;

  return (
    <div>
      <h4>Messages</h4>

      {/* Display messages */}
      <ListGroup className="list-group" ref={messagesContainerRef}>
        {messages.map((message) => (
          <ListGroup.Item
            key={message._id}
            className={
              message.senderId === userData._id
                ? "bg-primary text-white text-end"
                : "bg-light text-dark text-start"
            }
          >
            <strong>{message.senderId === userData._id ? "You" : "Other"}</strong>:{" "}
            {message.content}
          </ListGroup.Item>
        ))}
      </ListGroup>

      {/* Message input */}
      <Form onSubmit={handleSendMessage}>
        <InputGroup>
          <Form.Control
            type="text"
            value={messageContent}
            onChange={(e) => setMessageContent(e.target.value)}
            placeholder="Type your message..."
          />
          <Button type="submit" variant="primary">
            Send
          </Button>
        </InputGroup>
      </Form>
    </div>
  );
};

export default ChatPage;

import React, { useState, useEffect, useRef } from "react";
import { Button, ListGroup, Form, InputGroup } from "react-bootstrap";
import { io } from "socket.io-client";
import { useDispatch, useSelector } from "react-redux";
import { addMessage, setMessages } from "../../MessageSlice";
import axios from "axios";
import { useParams } from "react-router-dom";
import "./Messages.css";

let socket;

const ChatPage = () => {
  const dispatch = useDispatch();
  const messages = useSelector((state) => state.messages);
  const [messageContent, setMessageContent] = useState("");
  const [userData, setUserData] = useState(null);
  const [connections, setConnections] = useState([]);
  const [error, setError] = useState("");
  const messagesContainerRef = useRef(null);
  const { targetUserId } = useParams(); // Get targetUserId from URL params

  // Fetch user data and connections
  useEffect(() => {
    const userId = localStorage.getItem("userId");

    if (userId) {
      const fetchUserData = async () => {
        try {
          const response = await axios.get(`http://localhost:5000/user/${userId}`);
          setUserData(response.data);
          setConnections(response.data.connections);
        } catch (err) {
          setError("Error fetching user data.");
          console.error(err);
        }
      };

      fetchUserData();
    } else {
      setError("User ID not found in local storage.");
    }
  }, []);

  // Setup socket connection
  useEffect(() => {
    if (!userData) return;

    socket = io("http://localhost:5000", { withCredentials: true });

    socket.emit("join", userData._id);

    // Listen for new messages
    socket.on("new_message", (newMessage) => {
      console.log("New message received:", newMessage);
      dispatch(addMessage(newMessage)); // Update Redux state with the new message
    });

    return () => {
      socket.disconnect();
    };
  }, [userData, dispatch]);

  // Fetch messages for the selected user
  useEffect(() => {
    if (!targetUserId || !userData) return;

    const fetchMessages = async () => {
      try {
        const response = await axios.get("http://localhost:5000/api/messages", {
          params: { userId: userData._id, targetUserId },
        });
        dispatch(setMessages(response.data));
      } catch (err) {
        setError("Error fetching messages.");
        console.error(err);
      }
    };

    fetchMessages();
  }, [userData, targetUserId, dispatch]);

  // Handle sending a message
  const handleSendMessage = async (e) => {
    e.preventDefault();

    if (!messageContent.trim() || !targetUserId) return;

    const newMessage = {
      senderId: userData._id,
      receiverId: targetUserId,
      content: messageContent.trim(),
    };

    try {
      // Emit message via socket
      socket.emit("send_message", newMessage);

      // Optimistic UI update
      dispatch(addMessage(newMessage));
      setMessageContent("");
    } catch (err) {
      setError("Error sending message.");
      console.error(err);
    }
  };

  const scrollToBottom = () => {
    if (messagesContainerRef.current) {
      messagesContainerRef.current.scrollTop = messagesContainerRef.current.scrollHeight;
    }
  };

  useEffect(() => {
    scrollToBottom(); // Scroll to the bottom whenever messages change
  }, [messages]);

  if (error) return <div>{error}</div>;

  return (
    <div>
      <h4>Messages</h4>

      {/* Display messages */}
      <ListGroup className="list-group" ref={messagesContainerRef}>
  {messages.map((message) => {
    console.log("message:", message);
    // Retrieve sender's name or 'You' for the current user
    const senderName = (message.sender || message.senderId) === userData._id ? "You" : "Other";
    console.log("senderName:", message.sender);
    console.log("userData._id:", userData._id);

    return (
      <ListGroup.Item
        key={message._id + message.createdAt} // Combine _id and createdAt to make the key unique
        className={
            (message.sender || message.senderId)=== userData._id
            ? "bg-primary text-white text-end"
            : "bg-light text-dark text-start"
        }
      >
        <strong>{senderName}:</strong> {message.content}
      </ListGroup.Item>
    );
  })}
</ListGroup>
      {/* Message input */}
      <Form onSubmit={handleSendMessage}>
        <InputGroup>
          <Form.Control
            type="text"
            value={messageContent}
            onChange={(e) => setMessageContent(e.target.value)}
            placeholder="Type your message..."
          />
          <Button type="submit" variant="primary">
            Send
          </Button>
        </InputGroup>
      </Form>
    </div>
  );
};

export default ChatPage;
